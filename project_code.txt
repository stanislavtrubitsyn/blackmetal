----
E:\Work\blackmetal\.env
----
VITE_API_URL=https://api.example.com

----
E:\Work\blackmetal\generateCode2.js
----
import fs from 'fs'
import path from 'path'

// Конфигурация
const config = {
	excludedDirs: ['node_modules', '.git', 'dist', 'build'],
	excludedFiles: [
		'example.js',
		'config.json',
		'project_code.txt',
		'.gitignore',
		'.dockerignore',
		'cache-life.d.ts',
		'package-lock.json',
		'.next',
		'generateCode.js',
		'README.md',
	],
	excludedExtensions: ['.svg', '.png', '.jpg', '.log', '.gz', '.rscinfo', '.old', '.ico'],
	outputFile: 'project_code.txt',
}

function shouldExclude(filePath) {
	const ext = path.extname(filePath).toLowerCase()
	const fileName = path.basename(filePath)
	const normalizedPath = filePath.replace(/\\/g, '/')

	// Проверка директорий
	for (const dir of config.excludedDirs) {
		if (
			normalizedPath.includes(`/${dir}/`) ||
			normalizedPath.startsWith(`${dir}/`) ||
			normalizedPath.endsWith(`/${dir}`) ||
			normalizedPath === dir
		) {
			return true
		}
	}

	// Проверка файлов и расширений
	return config.excludedFiles.includes(fileName) || config.excludedExtensions.includes(ext)
}

function processDirectory(directory, output) {
	const normalizedDir = directory.replace(/\\/g, '/')
	if (shouldExclude(normalizedDir)) return

	const files = fs.readdirSync(directory)

	for (const file of files) {
		const fullPath = path.join(directory, file)

		try {
			const stat = fs.statSync(fullPath)

			if (stat.isDirectory()) {
				const dirName = path.basename(fullPath)
				if (config.excludedDirs.includes(dirName)) continue

				if (!shouldExclude(fullPath)) {
					processDirectory(fullPath, output)
				}
			} else {
				if (!shouldExclude(fullPath)) {
					output.push(`----\n${fullPath}\n----\n`)

					try {
						const content = fs.readFileSync(fullPath, 'utf-8')
						output.push(content)
						output.push('\n')
					} catch (err) {
						output.push(`[Error reading file: ${err.message}]\n`)
					}
				}
			}
		} catch (err) {
			console.error(`Error processing ${fullPath}: ${err.message}`)
		}
	}
}

function generateProjectCode(rootDir = '.') {
	const output = []

	if (!fs.existsSync(rootDir)) {
		console.error(`Directory does not exist: ${rootDir}`)
		return
	}

	console.log('Generating project code...')
	console.log(`Excluded directories: ${config.excludedDirs.join(', ')}`)
	console.log(`Excluded files: ${config.excludedFiles.join(', ')}`)
	console.log(`Excluded extensions: ${config.excludedExtensions.join(', ')}`)

	processDirectory(rootDir, output)

	fs.writeFileSync(config.outputFile, output.join(''), 'utf-8')
	console.log(`\nOutput saved to ${config.outputFile}`)
	console.log(`Total files processed: ${output.filter(line => line.startsWith('----')).length}`)
}

// Запуск
generateProjectCode(process.cwd())

----
E:\Work\blackmetal\index.html
----
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<link rel="icon" type="image/svg+xml" href="/isi.jpg" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Інститут чорної металургії</title>
	</head>
	<body>
		<div id="root"></div>
		<script type="module" src="/src/main.tsx"></script>
	</body>
</html>

----
E:\Work\blackmetal\package.json
----
{
	"name": "frontend",
	"private": true,
	"version": "0.0.0",
	"type": "module",
	"scripts": {
		"dev": "vite",
		"build": "tsc -b && vite build",
		"lint": "eslint .",
		"preview": "vite preview",
		"predeploy": "npm run build",
		"deploy": "gh-pages -d dist",
		"clean:js": "find . -name \"*.js\" -type f -delete"
	},
	"dependencies": {
		"@emotion/react": "^11.14.0",
		"@emotion/styled": "^11.14.0",
		"@mui/icons-material": "^6.4.12",
		"@mui/material": "^6.4.12",
		"axios": "^1.7.9",
		"react": "18.2.0",
		"react-dom": "18.2.0",
		"react-router-dom": "^7.6.1",
		"zustand": "^5.0.3"
	},
	"devDependencies": {
		"@eslint/js": "^9.19.0",
		"@types/node": "^22.15.29",
		"@types/react": "18.2.0",
		"@types/react-dom": "18.2.0",
		"@vitejs/plugin-react-swc": "^3.5.0",
		"eslint": "^9.19.0",
		"eslint-plugin-react-hooks": "^5.0.0",
		"eslint-plugin-react-refresh": "^0.4.18",
		"gh-pages": "^6.3.0",
		"globals": "^15.14.0",
		"typescript": "~5.7.2",
		"typescript-eslint": "^8.22.0",
		"vite": "^6.1.0"
	}
}

----
E:\Work\blackmetal\src\App.tsx
----
import { CssBaseline, ThemeProvider } from '@mui/material'
import { darkTheme, lightTheme } from './theme'
import Router from '@/router/Router'
import { useTheme } from '@/hooks/useTheme'

function App() {
	const { theme } = useTheme()

	return (
		<ThemeProvider theme={theme === 'dark' ? darkTheme : lightTheme}>
			<CssBaseline />
			<Router />
		</ThemeProvider>
	)
}

export default App

----
E:\Work\blackmetal\src\components\FeedbackForm\FeedbackForm.tsx
----
import { FC, useState } from 'react';
import { TextField, Button, Stack, Snackbar, Alert, Slide, SlideProps } from '@mui/material';
import { styled, keyframes } from '@mui/material/styles';
import { validateEmail, validateName, validateMessage } from '../../utils/validators';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import SendIcon from '@mui/icons-material/Send';

const Form = styled('form')({
  display: 'flex',
  flexDirection: 'column',
  gap: '24px',
});

const pulseAnimation = keyframes`
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
  100% {
    transform: scale(1);
  }
`;

const successIconAnimation = keyframes`
  0% {
    transform: scale(0) rotate(-45deg);
    opacity: 0;
  }
  50% {
    transform: scale(1.2) rotate(0);
  }
  100% {
    transform: scale(1) rotate(0);
    opacity: 1;
  }
`;

const StyledTextField = styled(TextField)({
  '& .MuiOutlinedInput-root': {
    borderRadius: '8px',
    '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
      borderColor: '#2D7A84',
    },
  },
  '& .MuiInputLabel-root.Mui-focused': {
    color: '#2D7A84',
  },
  '& .MuiOutlinedInput-input': {
    padding: '14px 16px',
  },
  '& .MuiInputLabel-outlined': {
    transform: 'translate(16px, 16px) scale(1)',
  },
  '& .MuiInputLabel-outlined.MuiInputLabel-shrink': {
    transform: 'translate(14px, -6px) scale(0.75)',
  },
});

const SubmitButton = styled(Button)(({ theme }) => ({
  marginTop: '8px',
  height: '48px',
  background: 'linear-gradient(45deg, #2D7A84 30%, #3B98A3 90%)',
  boxShadow: '0 3px 5px 2px rgba(45, 122, 132, 0.3)',
  transition: 'transform 0.2s ease',
  borderRadius: '8px',
  '&:hover': {
    background: 'linear-gradient(45deg, #2D7A84 30%, #3B98A3 90%)',
    transform: 'translateY(-2px)',
    boxShadow: '0 6px 10px 2px rgba(45, 122, 132, 0.3)',
  },
  '& .MuiButton-endIcon': {
    marginLeft: '8px',
    transition: 'transform 0.2s ease',
  },
  '&:hover .MuiButton-endIcon': {
    transform: 'translateX(4px)',
  },
}));

const ErrorMessage = styled('div')({
  color: '#d32f2f',
  fontSize: '0.75rem',
  marginTop: '-16px',
  marginBottom: '8px',
});

const SuccessAlert = styled(Alert)(({ theme }) => ({
  background: 'linear-gradient(45deg, #2D7A84 30%, #3B98A3 90%)',
  color: '#fff',
  borderRadius: '16px',
  padding: '16px 24px',
  boxShadow: '0 8px 16px rgba(45, 122, 132, 0.3)',
  minWidth: '300px',
  animation: `${pulseAnimation} 0.5s ease-out`,
  '& .MuiAlert-icon': {
    color: '#fff',
    animation: `${successIconAnimation} 0.5s ease-out`,
    fontSize: '28px',
    marginRight: '12px',
  },
  '& .MuiAlert-message': {
    fontSize: '1rem',
    fontWeight: 500,
    padding: '4px 0',
  },
  '& .MuiAlert-action': {
    paddingTop: 0,
    color: '#fff',
  },
}));

const SlideTransition = (props: SlideProps) => {
  return <Slide {...props} direction="down" />;
};

interface FeedbackFormProps {
  onClose: () => void;
}

const initialFormState = {
  name: '',
  email: '',
  message: '',
};

interface FormErrors {
  name: string | null;
  email: string | null;
  message: string | null;
}

const initialErrors: FormErrors = {
  name: null,
  email: null,
  message: null,
};

export const FeedbackForm: FC<FeedbackFormProps> = ({ onClose }) => {
  const [formData, setFormData] = useState(initialFormState);
  const [errors, setErrors] = useState<FormErrors>(initialErrors);
  const [openSnackbar, setOpenSnackbar] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const validateField = (name: string, value: string) => {
    switch (name) {
      case 'name':
        return validateName(value);
      case 'email':
        return validateEmail(value);
      case 'message':
        return validateMessage(value);
      default:
        return null;
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    const error = validateField(name, value);
    setErrors(prev => ({
      ...prev,
      [name]: error
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const newErrors = {
      name: validateName(formData.name),
      email: validateEmail(formData.email),
      message: validateMessage(formData.message),
    };

    setErrors(newErrors);

    if (Object.values(newErrors).every(error => error === null)) {
      setIsSubmitting(true);

      try {
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        setOpenSnackbar(true);
        
        setTimeout(() => {
          setFormData(initialFormState);
          onClose();
          setIsSubmitting(false);
        }, 1500);
      } catch (error) {
        setIsSubmitting(false);
      }
    }
  };

  const handleCloseSnackbar = () => {
    setOpenSnackbar(false);
  };

  return (
    <>
      <Form onSubmit={handleSubmit}>
        <StyledTextField
          label="Ім'я"
          name="name"
          value={formData.name}
          onChange={handleChange}
          fullWidth
          required
          disabled={isSubmitting}
        />
        {errors.name && <ErrorMessage>{errors.name}</ErrorMessage>}

        <StyledTextField
          label="Email"
          name="email"
          type="email"
          value={formData.email}
          onChange={handleChange}
          fullWidth
          required
          disabled={isSubmitting}
        />
        {errors.email && <ErrorMessage>{errors.email}</ErrorMessage>}

        <StyledTextField
          label="Повідомлення"
          name="message"
          value={formData.message}
          onChange={handleChange}
          multiline
          rows={4}
          fullWidth
          required
          disabled={isSubmitting}
        />
        {errors.message && <ErrorMessage>{errors.message}</ErrorMessage>}

        <SubmitButton
          type="submit"
          variant="contained"
          fullWidth
          disabled={isSubmitting}
          endIcon={<SendIcon />}
        >
          {isSubmitting ? 'Надсилання...' : 'Надіслати'}
        </SubmitButton>
      </Form>

      <Snackbar
        open={openSnackbar}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
        TransitionComponent={SlideTransition}
      >
        <SuccessAlert 
          icon={<CheckCircleOutlineIcon />}
          onClose={handleCloseSnackbar} 
          variant="filled"
        >
          Дякуємо! Ваше повідомлення успішно надіслано ✨
        </SuccessAlert>
      </Snackbar>
    </>
  );
}; 
----
E:\Work\blackmetal\src\components\index.ts
----
export { default as Loader } from './Loader'
export { default as SocialLinks } from './SocialLinks'
export { default as UniversalLogo } from './UniversalLogo'

----
E:\Work\blackmetal\src\components\Loader\index.tsx
----
export { default } from './Loader'

----
E:\Work\blackmetal\src\components\Loader\Loader.tsx
----
import { Box, CircularProgress } from '@mui/material'

const Loader = () => {
	return (
		<Box
			sx={{
				display: 'flex',
				justifyContent: 'center',
				alignItems: 'center',
				height: '100vh',
			}}
		>
			<CircularProgress />
		</Box>
	)
}

export default Loader

----
E:\Work\blackmetal\src\components\Modal\index.ts
----
export { Modal } from './Modal';
export type { ModalProps } from './types'; 
----
E:\Work\blackmetal\src\components\Modal\Modal.tsx
----
import { FC } from 'react';
import {
  Dialog,
  DialogContent,
  IconButton,
  Box,
} from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import { styled } from '@mui/material/styles';
import { ModalProps } from './types';

const StyledDialog = styled(Dialog)(({ theme }) => ({
  '& .MuiDialog-paper': {
    borderRadius: '8px',
    maxWidth: '500px',
    width: '100%',
    margin: '16px',
    boxShadow: '0 8px 24px rgba(0, 0, 0, 0.15)',
  },
}));

const ModalHeader = styled(Box)({
  display: 'flex',
  justifyContent: 'space-between',
  alignItems: 'center',
  padding: '24px 24px 20px 24px',
  borderBottom: '1px solid #e0e0e0',
});

const Title = styled('h2')({
  margin: 0,
  fontSize: '24px',
  fontWeight: 600,
  color: '#2c3e50',
  lineHeight: 1.2,
});

const CloseButton = styled(IconButton)({
  padding: 8,
  marginRight: -8,
  marginTop: -8,
  '& svg': {
    fontSize: '24px',
    color: '#666',
  },
  '&:hover': {
    backgroundColor: 'rgba(0, 0, 0, 0.04)',
    '& svg': {
      color: '#333',
    },
  },
});

const StyledDialogContent = styled(DialogContent)({
  padding: '24px',
  '&.MuiDialogContent-root': {
    padding: '24px',
  },
});

export const Modal: FC<ModalProps> = ({
  open,
  onClose,
  title,
  children,
  maxWidth = 'sm',
  fullWidth = true,
}) => {
  return (
    <StyledDialog
      open={open}
      onClose={onClose}
      maxWidth={maxWidth}
      fullWidth={fullWidth}
    >
      <ModalHeader>
        {title && <Title>{title}</Title>}
        <CloseButton onClick={onClose} aria-label="close">
          <CloseIcon />
        </CloseButton>
      </ModalHeader>
      <StyledDialogContent>
        {children}
      </StyledDialogContent>
    </StyledDialog>
  );
}; 
----
E:\Work\blackmetal\src\components\Modal\types.ts
----
export interface ModalProps {
  open: boolean;
  onClose: () => void;
  title?: string;
  children: React.ReactNode;
  maxWidth?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  fullWidth?: boolean;
} 
----
E:\Work\blackmetal\src\components\Pagination\index.ts
----
export { Pagination } from './Pagination';
export type { PaginationProps } from './types'; 
----
E:\Work\blackmetal\src\components\Pagination\Pagination.tsx
----
import { FC } from 'react'
import { Box, Button } from '@mui/material'
import { styled } from '@mui/material/styles'
import { PaginationProps } from './types'
import { usePagination } from './usePagination'

const PaginationContainer = styled(Box)({
	display: 'flex',
	justifyContent: 'center',
	alignItems: 'center',
	gap: '0.5rem',
	marginTop: '2rem',
})

const PageButton = styled(Button)(({ theme }) => ({
	minWidth: '40px',
	height: '40px',
	padding: '0',
	color: theme.palette.primary.main,
	borderColor: theme.palette.primary.main,
	borderRadius: 0,
	'&.active': {
		backgroundColor: theme.palette.primary.main,
		color: '#fff',
		'&:hover': {
			backgroundColor: theme.palette.primary.dark,
		},
	},
	'&:hover': {
		borderColor: theme.palette.primary.dark,
		backgroundColor: 'rgba(20, 41, 52, 0.04)',
	},
}))

const Ellipsis = styled(Box)(({ theme }) => ({
	display: 'flex',
	alignItems: 'center',
	justifyContent: 'center',
	width: '40px',
	height: '40px',
	color: theme.palette.primary.main,
}))

export const Pagination: FC<PaginationProps> = ({
	totalItems,
	itemsPerPage,
	currentPage,
	onPageChange,
	siblingCount = 1,
}) => {
	const paginationRange = usePagination({
		totalItems,
		itemsPerPage,
		currentPage,
		siblingCount,
	})

	if (currentPage === 0 || paginationRange.length < 2) {
		return null
	}

	const onNext = () => {
		onPageChange(currentPage + 1)
	}

	const onPrevious = () => {
		onPageChange(currentPage - 1)
	}

	const lastPage = paginationRange[paginationRange.length - 1].value as number

	return (
		<PaginationContainer>
			<PageButton variant='outlined' onClick={onPrevious} disabled={currentPage === 1}>
				{'<'}
			</PageButton>

			{paginationRange.map((pageNumber, index) => {
				if (pageNumber.type === 'ellipsis') {
					return <Ellipsis key={`ellipsis-${index}`}>{pageNumber.value}</Ellipsis>
				}

				return (
					<PageButton
						key={pageNumber.value}
						variant='outlined'
						onClick={() => onPageChange(pageNumber.value as number)}
						className={
							pageNumber.type === 'page' && 'isActive' in pageNumber && pageNumber.isActive
								? 'active'
								: ''
						}
					>
						{pageNumber.value}
					</PageButton>
				)
			})}

			<PageButton variant='outlined' onClick={onNext} disabled={currentPage === lastPage}>
				{'>'}
			</PageButton>
		</PaginationContainer>
	)
}

----
E:\Work\blackmetal\src\components\Pagination\types.ts
----
export interface PaginationProps {
  totalItems: number;
  itemsPerPage: number;
  currentPage: number;
  onPageChange: (page: number) => void;
  siblingCount?: number;
}

export interface UsePaginationProps {
  totalItems: number;
  itemsPerPage: number;
  currentPage: number;
  siblingCount?: number;
}

export interface PaginationItem {
  type: 'page' | 'ellipsis';
  value: number | string;
  isActive?: boolean;
} 
----
E:\Work\blackmetal\src\components\Pagination\usePagination.ts
----
import { useMemo } from 'react';
import { UsePaginationProps, PaginationItem } from './types';

const DOTS = '...';

export const usePagination = ({
  totalItems,
  itemsPerPage,
  currentPage,
  siblingCount = 1
}: UsePaginationProps) => {
  const paginationRange = useMemo(() => {
    const totalPages = Math.ceil(totalItems / itemsPerPage);
    
    // Количество страниц в пагинации
    const totalPageNumbers = siblingCount + 5;

    if (totalPageNumbers >= totalPages) {
      return Array.from({ length: totalPages }, (_, i) => ({
        type: 'page' as const,
        value: i + 1,
        isActive: i + 1 === currentPage
      }));
    }

    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);
    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPages);

    const shouldShowLeftDots = leftSiblingIndex > 2;
    const shouldShowRightDots = rightSiblingIndex < totalPages - 1;

    const firstPageIndex = 1;
    const lastPageIndex = totalPages;

    if (!shouldShowLeftDots && shouldShowRightDots) {
      const leftItemCount = 3 + 2 * siblingCount;
      const leftRange = Array.from({ length: leftItemCount }, (_, i) => ({
        type: 'page' as const,
        value: i + 1,
        isActive: i + 1 === currentPage
      }));

      return [...leftRange, { type: 'ellipsis' as const, value: DOTS }, { type: 'page' as const, value: lastPageIndex }];
    }

    if (shouldShowLeftDots && !shouldShowRightDots) {
      const rightItemCount = 3 + 2 * siblingCount;
      const rightRange = Array.from({ length: rightItemCount }, (_, i) => ({
        type: 'page' as const,
        value: totalPages - rightItemCount + i + 1,
        isActive: totalPages - rightItemCount + i + 1 === currentPage
      }));

      return [{ type: 'page' as const, value: firstPageIndex }, { type: 'ellipsis' as const, value: DOTS }, ...rightRange];
    }

    const middleRange = Array.from({ length: rightSiblingIndex - leftSiblingIndex + 1 }, (_, i) => ({
      type: 'page' as const,
      value: leftSiblingIndex + i,
      isActive: leftSiblingIndex + i === currentPage
    }));

    return [
      { type: 'page' as const, value: firstPageIndex },
      { type: 'ellipsis' as const, value: DOTS },
      ...middleRange,
      { type: 'ellipsis' as const, value: DOTS },
      { type: 'page' as const, value: lastPageIndex }
    ];
  }, [totalItems, itemsPerPage, currentPage, siblingCount]);

  return paginationRange;
}; 
----
E:\Work\blackmetal\src\components\SocialLinks\index.tsx
----
export { default } from './SocialLinks'

----
E:\Work\blackmetal\src\components\SocialLinks\SocialLinks.tsx
----
import { Box, Link as MUILink } from '@mui/material'
import FacebookRoundedIcon from '@mui/icons-material/FacebookRounded'
import InstagramIcon from '@mui/icons-material/Instagram'
import XIcon from '@mui/icons-material/X'
import YouTubeIcon from '@mui/icons-material/YouTube'
const SocialLinks = () => {
	const iconsStyle = {
		width: '28px',
		height: '28px',
		color: '#E4E4E4',
		transition: 'color 0.3s ease',
		'&:hover': {
			color: '#2D7A84',
		},
	}
	return (
		<Box sx={{ display: 'flex', gap: '10px' }}>
			<MUILink href='' target='_blank' rel='noopener noreferrer'>
				<FacebookRoundedIcon sx={iconsStyle} />
			</MUILink>
			<MUILink href='' target='_blank' rel='noopener noreferrer'>
				<InstagramIcon sx={iconsStyle} />
			</MUILink>
			<MUILink href='' target='_blank' rel='noopener noreferrer'>
				<XIcon sx={iconsStyle} />
			</MUILink>
			<MUILink href='' target='_blank' rel='noopener noreferrer'>
				<YouTubeIcon sx={iconsStyle} />
			</MUILink>
		</Box>
	)
}

export default SocialLinks

----
E:\Work\blackmetal\src\components\UniversalLogo\index.tsx
----
export { default } from './UniversalLogo'

----
E:\Work\blackmetal\src\components\UniversalLogo\LogoInterface.ts
----
type LogoType = 'icon' | 'icon-text'

export interface UniversalLogoProps {
	size?: number // размер в пикселях (работает только для type="icon")
	type?: LogoType
	className?: string
}

----
E:\Work\blackmetal\src\components\UniversalLogo\UniversalLogo.tsx
----
import React from 'react'
import { Box, Typography } from '@mui/material'

import { UniversalLogoProps } from './LogoInterface'

const UniversalLogo: React.FC<UniversalLogoProps> = ({ size, type = 'icon' }) => {
	return (
		<>
			{type === 'icon' ? (
				<Box component='img' src='/isi.jpg' alt='logo' sx={{ height: size }} />
			) : (
				<>
					<Box
						sx={{
							display: 'flex',
							alignItems: 'center',
							justifyContent: 'center',
							gap: '7px',
						}}
					>
						<Box
							component='img'
							src='/isi.jpg'
							alt='logo'
							sx={{
								width: { xxs: '40px', sm: '60px' },
							}}
						/>
						<Typography
							sx={{
								fontWeight: 'bold',
								fontSize: { xxs: '10px', sm: '13px' },
								lineHeight: 1.2,
								maxWidth: { xxs: '180px', sm: '100%' },
							}}
						>
							Інститут чорної металургії <br /> ім. З.І. Некрасова <br />
							Національної академії наук України
						</Typography>
					</Box>
				</>
			)}
		</>
	)
}

export default UniversalLogo

----
E:\Work\blackmetal\src\hooks\useTheme.ts
----
import { useState, useEffect } from 'react'

export const useTheme = () => {
	const [theme, setTheme] = useState<'light' | 'dark'>('light')

	useEffect(() => {
		const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null
		if (savedTheme) {
			setTheme(savedTheme) // Если тема сохранена в localStorage - используем её
		} else {
			setTheme('light') // Иначе всегда устанавливаем светлую тему
		}
	}, [])

	const toggleTheme = () => {
		const newTheme = theme === 'light' ? 'dark' : 'light'
		setTheme(newTheme)
		localStorage.setItem('theme', newTheme)
	}

	return { theme, toggleTheme }
}

----
E:\Work\blackmetal\src\layouts\Footer\Footer.tsx
----
import {
	Box,
	List,
	ListItem,
	Typography,
	Link as MUILink,
	Divider,
	Button,
} from '@mui/material'
import { Link } from 'react-router-dom'
import { SocialLinks, UniversalLogo } from '@/components'
import routes from '@/router/routes.json'
import { RouteConfig, RoutesConfig } from '@/router/types'

const Footer = () => {
	const listItemStyle = {
		width: 'fit-content',
		minWidth: 'unset',
		p: 0,
		display: 'flex',
		justifyContent: 'center',
		whiteSpace: 'nowrap',
		color: '#333333',
		textDecoration: 'none',
		transition: 'color 0.3s ease',
		'&:hover': {
			color: '#2D7A84',
		},
	}

	const listTypographyStyle = { fontSize: '15px', fontWeight: 400 }
	const titleStyles = { fontSize: '15px', fontWeight: 700, color: '#363636' }
	const boxStyles = {
		height: '54px',
		display: 'flex',
		alignItems: 'center',
		mb: '5px',
	}

	// Приводим routes к типу RoutesConfig и фильтруем
	const footerLinks = Object.values(routes as RoutesConfig).filter(
		(route): route is RouteConfig & { showIn: string } =>
			route.showIn === 'Footer'
	)

	return (
		<Box
			sx={{
				width: '100%',
				display: 'flex',
				justifyContent: 'center',
				minHeight: '271px',
				px: { xxs: '20px', xl: '190px' },
				pb: '20px',
				bgcolor: '#ffffff',
			}}
		>
			<Box
				sx={{
					maxWidth: 'xxl',
					minWidth: 'xxs',
					width: '100%',
					display: 'flex',
					flexDirection: 'column',
					alignItems: 'center',
				}}
			>
				<List
					sx={{
						display: 'flex',
						flexDirection: 'row',
						alignItems: 'center',
						justifyContent: { xxs: 'center', lg: 'space-between' },
						gap: { xxs: '60px', lg: '0px' },
						flexWrap: 'wrap',
						width: '80%',
						p: 0,
						pt: '20px',
					}}
				>
					{footerLinks.map(link => (
						<ListItem
							key={link.path}
							component={Link}
							to={link.path}
							sx={listItemStyle}
						>
							<Typography sx={listTypographyStyle}>{link.title}</Typography>
						</ListItem>
					))}
				</List>
				<Divider
					sx={{
						width: '100%',
						maxWidth: 'xxxl',
						minWidth: 'xxs',
						borderColor: '#D2D2D2',
						borderBottomWidth: '1px',
						mt: 2,
					}}
				/>
				<Box
					sx={{
						width: '95%',
						mt: '25px',
						px: { xxs: '20px', lg: '0px' },
						display: 'flex',
						justifyContent: { xxs: 'center', lg: 'space-between' },
						gap: { xxs: '60px', lg: '0px' },
						alignItems: 'center',
						flexWrap: 'wrap',
					}}
				>
					<Box
						sx={{
							display: 'flex',
							flexDirection: 'column',
							alignItems: 'center',
						}}
					>
						<UniversalLogo size={54} />
						<MUILink href='' target='_blank' rel='noopener noreferrer'>
							<Typography sx={{ fontSize: '12px' }}>Мапа сайту</Typography>
						</MUILink>
						<Typography sx={{ fontSize: '12px' }}>
							© 2006-2019 О сайте
						</Typography>
					</Box>

					<Box
						sx={{
							display: 'flex',
							flexDirection: 'column',
							alignItems: 'center',
						}}
					>
						<Box sx={boxStyles}>
							<Typography sx={titleStyles}>МІСЦЕ ЗНАХОДЖЕННЯ</Typography>
						</Box>
						<Typography
							sx={{
								fontSize: '15px',
								fontWeight: 400,
								color: '#606060',
								textAlign: 'center',
							}}
						>
							Дніпро, проспект Дмитра <br /> Яворницького, 19
						</Typography>
					</Box>
					<Box
						sx={{
							display: 'flex',
							flexDirection: 'column',
							alignItems: 'center',
						}}
					>
						<Box sx={boxStyles}>
							<Typography sx={titleStyles}>КОНТАКТИ</Typography>
						</Box>
						<Typography
							sx={{
								fontSize: '15px',
								fontWeight: 400,
								color: '#333333',
								textAlign: 'center',
							}}
						>
							+38 096 786 77 77 <br /> ntu@gmail.com
						</Typography>
					</Box>
					<Box
						sx={{
							display: 'flex',
							flexDirection: 'column',
							alignItems: 'center',
						}}
					>
						<Box sx={boxStyles}>
							<Typography sx={titleStyles}>ЗАДАТИ ПИТАННЯ</Typography>
						</Box>
						<Button
							variant='outlined'
							sx={{
								width: '186px',
								borderRadius: 0,
								textTransform: 'none',
								borderColor: '#333333',
								fontSize: '14px',
								fontWeight: 400,
								color: '#333333',
							}}
						>
							Зворотній зв'язок
						</Button>
					</Box>
					<Box
						sx={{
							display: 'flex',
							flexDirection: 'column',
							alignItems: 'center',
						}}
					>
						<Box sx={boxStyles}>
							<Typography sx={titleStyles}>СОЦ.МЕРЕЖІ</Typography>
						</Box>
						<SocialLinks />
					</Box>
				</Box>
			</Box>
		</Box>
	)
}

export default Footer

----
E:\Work\blackmetal\src\layouts\Footer\index.tsx
----
export { default } from './Footer'

----
E:\Work\blackmetal\src\layouts\Header\components\BurgerMenu\BurgerMenu.tsx
----
// src/layouts/Header/components/BurgerMenu/BurgerMenu.tsx
import { useState } from 'react'
import { Box, IconButton, Drawer, useTheme, Typography, Divider } from '@mui/material'
import MenuIcon from '@mui/icons-material/Menu'
import CloseIcon from '@mui/icons-material/Close'
import { NavItem } from '../NavItem'
import { NavigationData } from '../../interface'
import { SocialLinks } from '@/components'
import { Search } from '../Search'

interface BurgerMenuProps {
	navItems: NavigationData['navItems']
	searchQuery: string
	onSearchChange: (event: React.ChangeEvent<HTMLInputElement>) => void
	onSearchSubmit: (event: React.FormEvent) => void
}

export const BurgerMenu = ({
	navItems,
	searchQuery,
	onSearchChange,
	onSearchSubmit,
}: BurgerMenuProps) => {
	const [open, setOpen] = useState(false)
	const [expandedItems, setExpandedItems] = useState<Record<string, boolean>>({})
	const theme = useTheme()

	const toggleDrawer = (newOpen: boolean) => () => {
		setOpen(newOpen)
		if (!newOpen) {
			setExpandedItems({})
		}
	}

	const toggleItem = (id: string) => {
		setExpandedItems(prev => ({
			...prev,
			[id]: !prev[id],
		}))
	}

	const renderMobileNavItems = (items: NavigationData['navItems'], level = 0) => {
		return items.map(item => (
			<Box
				key={item.id}
				sx={{
					width: '100%',
					pl: level * 2,
					borderLeft: level > 0 ? `2px solid ${theme.palette.divider}` : 'none',
				}}
			>
				<Box
					sx={{
						display: 'flex',
						alignItems: 'center',
						justifyContent: 'space-between',
						width: '100%',
						py: 1.5,
						cursor: 'pointer',
						'&:hover': {
							backgroundColor: 'rgba(0,0,0,0.05)',
						},
					}}
					onClick={() => (item.items?.length ? toggleItem(item.id) : null)}
				>
					<Typography
						sx={{
							fontSize: '1.2rem',
							fontWeight: 'bold',
							color: '#373737',
						}}
					>
						{item.label}
					</Typography>
					{item.items?.length && (
						<Typography sx={{ color: '#373737' }}>{expandedItems[item.id] ? '−' : '+'}</Typography>
					)}
				</Box>

				{item.items?.length && expandedItems[item.id] && (
					<Box
						sx={{
							width: '100%',
							display: 'flex',
							flexDirection: 'column',
							mb: 2,
						}}
					>
						{renderMobileNavItems(item.items, level + 1)}
					</Box>
				)}
			</Box>
		))
	}

	return (
		<Box sx={{ display: { xxs: 'flex', sm: 'none' }, alignItems: 'center' }}>
			<IconButton onClick={toggleDrawer(true)} sx={{ color: '#373737', ml: 2 }}>
				<MenuIcon fontSize='large' />
			</IconButton>

			<Drawer
				anchor='right'
				open={open}
				onClose={toggleDrawer(false)}
				sx={{
					'& .MuiDrawer-paper': {
						width: '100%',
						maxWidth: '400px',
						backgroundColor: '#fff',
						padding: '20px',
						boxSizing: 'border-box',
					},
				}}
				ModalProps={{
					// Это предотвратит сдвиг контента при открытии меню
					style: {
						position: 'fixed',
						top: 0,
						right: 0,
						zIndex: theme.zIndex.drawer + 1,
					},
					BackdropProps: {
						style: {
							backgroundColor: 'rgba(0,0,0,0.5)',
						},
					},
				}}
			>
				<Box
					sx={{
						display: 'flex',
						justifyContent: 'flex-end',
						mb: 2,
					}}
				>
					<IconButton onClick={toggleDrawer(false)}>
						<CloseIcon fontSize='large' />
					</IconButton>
				</Box>

				<Box
					sx={{
						mb: 3,
						width: '100%',
						position: 'relative',
					}}
				>
					<Search
						searchQuery={searchQuery}
						onSearchChange={onSearchChange}
						onSearchSubmit={onSearchSubmit}
					/>
				</Box>

				<Box
					sx={{
						display: 'flex',
						flexDirection: 'column',
						gap: '10px',
						mb: 3,
					}}
				>
					{renderMobileNavItems(navItems)}
				</Box>

				<Box
					sx={{
						display: 'flex',
						justifyContent: 'center',
						mt: 'auto', // Это заставит блок быть внизу
						mb: 4,
						pt: 2,
					}}
				>
					<SocialLinks />
				</Box>
			</Drawer>
		</Box>
	)
}

----
E:\Work\blackmetal\src\layouts\Header\components\BurgerMenu\index.tsx
----
export { BurgerMenu } from './BurgerMenu'

----
E:\Work\blackmetal\src\layouts\Header\components\DropdownMenu\DropdownMenu.tsx
----
import { styled } from '@mui/material'
import { Box } from '@mui/material'

export const DropdownMenu = styled(Box)({
	position: 'absolute',
	top: '100%',
	left: 0,
	zIndex: 1002,
	backgroundColor: '#fff',
	boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.1)',
	minWidth: '220px',
	maxWidth: '260px',
})

----
E:\Work\blackmetal\src\layouts\Header\components\DropdownMenu\index.tsx
----
export { DropdownMenu } from './DropdownMenu'
export { NestedDropdownMenu } from './NestedDropdownMenu'

----
E:\Work\blackmetal\src\layouts\Header\components\DropdownMenu\NestedDropdownMenu.tsx
----
import { styled } from '@mui/material'
import { Box } from '@mui/material'

export const NestedDropdownMenu = styled(Box)({
	position: 'absolute',
	top: 0,
	left: '100%',
	zIndex: 1002,
	backgroundColor: '#fff',
	boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.1)',
	minWidth: '240px',
})

----
E:\Work\blackmetal\src\layouts\Header\components\index.tsx
----
export * from './Search'
export * from './LineDivider'
export * from './DropdownMenu'
export * from './NavItem'
export * from './BurgerMenu'

----
E:\Work\blackmetal\src\layouts\Header\components\LineDivider\index.tsx
----
export { LineDivider } from './LineDivider'

----
E:\Work\blackmetal\src\layouts\Header\components\LineDivider\LineDivider.tsx
----
import { Box } from '@mui/material'

export const LineDivider = () => (
	<Box
		sx={{
			width: '90%',
			height: '1px',
			backgroundColor: '#e0e0e0',
			mx: 'auto',
			my: 0,
		}}
	/>
)

----
E:\Work\blackmetal\src\layouts\Header\components\NavItem\index.tsx
----
export { NavItem } from './NavItem'

----
E:\Work\blackmetal\src\layouts\Header\components\NavItem\NavItem.tsx
----
// src/layouts/Header/components/NavItem/NavItem.tsx
import React from 'react'
import { Button, MenuItem, Typography, Box, Fade } from '@mui/material'
import KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight'
import { NavItem as NavItemType } from '../../interface'
import { DropdownMenu, NestedDropdownMenu, LineDivider } from '../'
import { useTheme } from '@mui/material/styles'
import useMediaQuery from '@mui/material/useMediaQuery'

interface NavItemProps {
	item: NavItemType
	level?: number
	hoveredItem: string | null
	hoveredSubItem: string | null
	onMouseEnter: (id: string) => void
	onMouseLeave: () => void
	onSubItemMouseEnter: (id: string) => void
	onSubItemMouseLeave: () => void
}

export const NavItem = ({
	item,
	level = 0,
	hoveredItem,
	hoveredSubItem,
	onMouseEnter,
	onMouseLeave,
	onSubItemMouseEnter,
	onSubItemMouseLeave,
}: NavItemProps) => {
	const theme = useTheme()
	const isMobile = useMediaQuery(theme.breakpoints.down('sm'))

	if (item.href) {
		return (
			<Button
				key={item.id}
				href={item.href}
				sx={{
					overflow: 'hidden',
					textOverflow: 'ellipsis',
					whiteSpace: 'nowrap',
					maxWidth: '100%',
					color: '#373737',
					textTransform: 'none',
					fontSize: { xs: '0.7rem', sm: '0.7rem', md: '1rem' },
					fontWeight: 'bold',
					borderRadius: 0,
					px: { xs: 1, sm: 1.5, md: 2 },
					py: { xs: 1.5, md: 0 },
					width: { xs: '100%', sm: 'auto' },
					justifyContent: { xs: 'flex-start', sm: 'center' },
					'&:hover': {
						color: '#2D7A84',
						backgroundColor: { xs: 'rgba(0,0,0,0.05)', sm: 'transparent' },
					},
				}}
			>
				{item.label}
			</Button>
		)
	}

	if (item.items?.length) {
		const isOpen = hoveredItem === item.id

		if (isMobile) {
			return (
				<Box key={item.id} sx={{ width: '100%' }}>
					<Button
						sx={{
							color: '#373737',
							textTransform: 'none',
							fontSize: '1.2rem',
							fontWeight: 'bold',
							borderRadius: 0,
							px: 0,
							py: 1.5,
							width: '100%',
							justifyContent: 'flex-start',
							'&:hover': {
								color: '#2D7A84',
								backgroundColor: 'rgba(0,0,0,0.05)',
							},
						}}
					>
						{item.label}
					</Button>

					<Box sx={{ pl: 2, mt: 1 }}>
						{item.items.map(subItem => (
							<NavItem
								key={subItem.id}
								item={subItem}
								level={level + 1}
								hoveredItem={hoveredItem}
								hoveredSubItem={hoveredSubItem}
								onMouseEnter={onMouseEnter}
								onMouseLeave={onMouseLeave}
								onSubItemMouseEnter={onSubItemMouseEnter}
								onSubItemMouseLeave={onSubItemMouseLeave}
							/>
						))}
					</Box>
				</Box>
			)
		}

		return (
			<Box
				key={item.id}
				sx={{ position: 'relative' }}
				onMouseEnter={() => onMouseEnter(item.id)}
				onMouseLeave={onMouseLeave}
			>
				<Button
					sx={{
						color: isOpen ? '#2D7A84' : '#373737',
						textTransform: 'none',
						fontSize: { xs: '0.7rem', md: '1rem' },
						fontWeight: 'bold',
						borderRadius: 0,
						px: { xs: 1, md: 2 },
						'&:hover': {
							color: '#2D7A84',
							backgroundColor: 'transparent',
						},
					}}
				>
					{item.label}
				</Button>

				<Fade in={isOpen} timeout={300}>
					<DropdownMenu>
						{item.items.map((subItem, index, arr) => (
							<React.Fragment key={subItem.id}>
								{subItem.items?.length ? (
									<Box
										sx={{
											position: 'relative',
											minHeight: '50px', // Минимальная высота
											height: 'auto', // Автоматическая высота
											py: 1, // Добавляем padding по вертикали
											'&:hover': {
												backgroundColor: '#2D7A84',
												color: '#fff',
											},
										}}
										onMouseEnter={() => onSubItemMouseEnter(subItem.id)}
										onMouseLeave={onSubItemMouseLeave}
									>
										<Box
											sx={{
												display: 'flex',
												justifyContent: 'space-between',
												alignItems: 'center',
												width: '100%',
												height: '100%',
												px: 2,
											}}
										>
											<Typography
												fontWeight='bold'
												sx={{
													overflow: 'hidden',
													textOverflow: 'ellipsis',
													whiteSpace: 'normal', // Разрешаем перенос строк
													maxWidth: '100%',
												}}
											>
												{subItem.label}
											</Typography>
											<KeyboardArrowRightIcon fontSize='small' />
										</Box>

										<Fade in={hoveredSubItem === subItem.id} timeout={300}>
											<NestedDropdownMenu>
												{subItem.items.map((nestedItem, nestedIndex, nestedArr) => (
													<React.Fragment key={nestedItem.id}>
														<MenuItem
															component='a'
															href={nestedItem.href}
															sx={{
																minHeight: '50px',
																height: 'auto',
																py: 1,
																color: '#373737',
																'&:hover': {
																	backgroundColor: '#2D7A84',
																	color: '#fff',
																},
															}}
														>
															<Typography
																fontWeight='bold'
																sx={{
																	overflow: 'hidden',
																	textOverflow: 'ellipsis',
																	whiteSpace: 'normal',
																	maxWidth: '100%',
																}}
															>
																{nestedItem.label}
															</Typography>
														</MenuItem>
														{nestedIndex < nestedArr.length - 1 && <LineDivider />}
													</React.Fragment>
												))}
											</NestedDropdownMenu>
										</Fade>
									</Box>
								) : (
									<MenuItem
										component='a'
										href={subItem.href}
										sx={{
											minHeight: '50px',
											height: 'auto',
											py: 1,
											color: '#373737',
											'&:hover': {
												backgroundColor: '#2D7A84',
												color: '#fff',
											},
										}}
									>
										<Typography
											fontWeight='bold'
											sx={{
												overflow: 'hidden',
												textOverflow: 'ellipsis',
												whiteSpace: 'normal',
												maxWidth: '100%',
											}}
										>
											{subItem.label}
										</Typography>
									</MenuItem>
								)}
								{index < arr.length - 1 && <LineDivider />}
							</React.Fragment>
						))}
					</DropdownMenu>
				</Fade>
			</Box>
		)
	}

	return null
}

----
E:\Work\blackmetal\src\layouts\Header\components\Search\index.tsx
----
export { Search } from './Search'

----
E:\Work\blackmetal\src\layouts\Header\components\Search\Search.tsx
----
// src/layouts/Header/components/BurgerMenu/Search.tsx
import { styled, alpha } from '@mui/material'
import SearchIcon from '@mui/icons-material/Search'
import { IconButton, InputBase } from '@mui/material'

const SearchWrapper = styled('div')(({ theme }) => ({
	position: 'relative',
	borderRadius: theme.shape.borderRadius,
	backgroundColor: alpha(theme.palette.common.white, 0.15),
	'&:hover': {
		backgroundColor: alpha(theme.palette.common.white, 0.25),
	},
	marginLeft: 0,
	width: '100%',
	border: '1px solid #C7C7C7',
}))

const SearchIconWrapper = styled('div')(({ theme }) => ({
	padding: theme.spacing(0, 2),
	height: '100%',
	position: 'absolute',
	pointerEvents: 'none',
	display: 'flex',
	alignItems: 'center',
	justifyContent: 'center',
	right: 0,
	color: '#C7C7C7',
}))

const StyledInputBase = styled(InputBase)(({ theme }) => ({
	color: '#373737',
	width: '100%',
	'& .MuiInputBase-input': {
		padding: theme.spacing(1, 1, 1, 1),
		paddingRight: `calc(1em + ${theme.spacing(4)})`,
		transition: theme.transitions.create('width'),
		width: '100%',
	},
}))

interface SearchProps {
	searchQuery: string
	onSearchChange: (event: React.ChangeEvent<HTMLInputElement>) => void
	onSearchSubmit: (event: React.FormEvent) => void
}

export const Search = ({ searchQuery, onSearchChange, onSearchSubmit }: SearchProps) => {
	return (
		<SearchWrapper>
			<form
				onSubmit={onSearchSubmit}
				style={{
					width: '100%',
					display: 'flex',
					alignItems: 'center',
					position: 'relative',
				}}
			>
				<StyledInputBase
					placeholder='Пошук по сайту'
					inputProps={{ 'aria-label': 'search' }}
					value={searchQuery}
					onChange={onSearchChange}
				/>
				<SearchIconWrapper>
					<SearchIcon />
				</SearchIconWrapper>
			</form>
		</SearchWrapper>
	)
}

----
E:\Work\blackmetal\src\layouts\Header\data.json
----
{
	"navItems": [
		{
			"id": "about",
			"label": "Про нас",
			"items": [
				{ "id": "developments", "label": "Основні розробки", "href": "/about/developments" },
				{ "id": "documents", "label": "Нормативні документи", "href": "/about/documents" },
				{ "id": "history", "label": "Історія Інституту", "href": "/about/history" },
				{ "id": "strategy", "label": "Стратегія Інституту", "href": "/about/strategy" },
				{ "id": "procurement", "label": "Закупівлі", "href": "/about/procurement" }
			]
		},
		{
			"id": "structure",
			"label": "Структура інститута",
			"items": [
				{ "id": "directorate", "label": "Дирекція", "href": "/structure/directorate" },
				{
					"id": "scientific-departments",
					"label": "Наукові відділи",
					"href": "/structure/scientific-departments"
				},
				{
					"id": "technical-departments",
					"label": "Науково-технічні відділи",
					"href": "/structure/technical-departments"
				},
				{
					"id": "scientific-councils",
					"label": "Вчені ради Інституту",
					"items": [
						{ "id": "main-council", "label": "Вчена рада", "href": "/structure/councils/main" },
						{
							"id": "young-scientists",
							"label": "Рада молодих вчених",
							"href": "/structure/councils/young"
						},
						{
							"id": "specialized-council",
							"label": "Спеціалізована вчена рада",
							"href": "/structure/councils/specialized"
						}
					]
				}
			]
		},
		{
			"id": "publishing",
			"label": "Видавнича діяльність",
			"items": [
				{
					"id": "scientific-works",
					"label": "Збірник наукових праць",
					"href": "/publishing/scientific-works"
				},
				{ "id": "monographs", "label": "Монографії", "href": "/publishing/monographs" }
			]
		},
		{
			"id": "training",
			"label": "Підготовка кадрів",
			"items": [
				{
					"id": "postgraduate",
					"label": "Аспірантура",
					"items": [
						{
							"id": "applicants",
							"label": "Для вступників",
							"href": "/training/postgraduate/applicants"
						},
						{
							"id": "individual-plans",
							"label": "Індивідуальні плани",
							"href": "/training/postgraduate/plans"
						},
						{ "id": "orders", "label": "Накази", "href": "/training/postgraduate/orders" },
						{
							"id": "regulations",
							"label": "Правила та положення",
							"href": "/training/postgraduate/regulations"
						},
						{ "id": "license", "label": "Ліцензія", "href": "/training/postgraduate/license" },
						{
							"id": "antiplagiat",
							"label": "Перевірка антиплагіату",
							"href": "/training/postgraduate/antiplagiat"
						},
						{
							"id": "syllabus-136",
							"label": "Силабуси 136",
							"href": "/training/postgraduate/syllabus-136"
						},
						{
							"id": "syllabus-132",
							"label": "Силабуси 132",
							"href": "/training/postgraduate/syllabus-132"
						},
						{
							"id": "stakeholders",
							"label": "Стейкхолдери",
							"href": "/training/postgraduate/stakeholders"
						},
						{
							"id": "accreditation",
							"label": "Акредитація",
							"href": "/training/postgraduate/accreditation"
						}
					]
				},
				{
					"id": "special-councils",
					"label": "Разові спеціалізовані ради",
					"href": "/training/special-councils"
				}
			]
		},
		{
			"id": "services",
			"label": "Послуги",
			"items": [
				{
					"id": "equipment-center",
					"label": "Центр колективного користування науковими приладами (ЦККП)",
					"href": "/services/equipment-center"
				},
				{
					"id": "testing-center",
					"label": "Випробувальний центр",
					"href": "/services/testing-center"
				},
				{
					"id": "technical-committee",
					"label": "Технічний комітет 4 (ТК4)",
					"href": "/services/technical-committee"
				},
				{
					"id": "technical-services",
					"label": "Науково-технічні послуги",
					"href": "/services/technical-services"
				}
			]
		},
		{
			"id": "contacts",
			"label": "Контакти",
			"href": "/contacts"
		}
	]
}

----
E:\Work\blackmetal\src\layouts\Header\Header.tsx
----
// src/layouts/Header/Header.tsx
import React, { useState } from 'react'
import { AppBar, Toolbar, Box, IconButton, InputBase, Divider, useTheme } from '@mui/material'
import { UniversalLogo } from '@/components'
import { SocialLinks } from '@/components'
import { NavItem } from './components/NavItem'
import navigationData from './data.json'
import { NavigationData } from './interface'
import { Search } from './components/Search'
import SearchIcon from '@mui/icons-material/Search'
import { BurgerMenu } from './components/BurgerMenu'

const Header = () => {
	const theme = useTheme()
	const { navItems } = navigationData as NavigationData
	const [hoveredItem, setHoveredItem] = useState<string | null>(null)
	const [hoveredSubItem, setHoveredSubItem] = useState<string | null>(null)
	const [searchQuery, setSearchQuery] = useState('')

	const handleMouseEnter = (id: string) => {
		setHoveredItem(id)
	}

	const handleMouseLeave = () => {
		setHoveredItem(null)
		setHoveredSubItem(null)
	}

	const handleSubItemMouseEnter = (id: string) => {
		setHoveredSubItem(id)
	}

	const handleSubItemMouseLeave = () => {
		setHoveredSubItem(null)
	}

	const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
		setSearchQuery(event.target.value)
	}

	const handleSearchSubmit = (event: React.FormEvent) => {
		event.preventDefault()
		// console.log('Search query:', searchQuery)
	}

	return (
		<AppBar
			position='static'
			sx={{
				display: 'flex',
				flexDirection: 'column',
				alignItems: 'center',
				justifyContent: 'center',
				backgroundColor: '#ffff',
				color: 'text.primary',
				boxShadow: 'none',
				width: '100%',
				height: { xxs: 'auto', sm: '165px' },
				py: { xxs: 2, sm: 0 },
				borderBottom: `1px solid ${theme.palette.divider}`,
			}}
		>
			<Toolbar
				sx={{
					display: 'flex',
					flexDirection: 'column',
					alignItems: 'center',
					justifyContent: 'space-around',
					maxWidth: 'xxl',
					minWidth: 'xxs',
					width: '90%',
					height: { xxs: 'auto', sm: '140px' },
					gap: { xxs: 2, sm: 0 },
				}}
			>
				<Box
					sx={{
						display: 'flex',
						alignItems: 'center',
						justifyContent: 'space-between',
						width: { xxs: '100%', sm: '98%' },
						flexDirection: { xxs: 'row', sm: 'row' },
						gap: { xxs: 2, sm: 0 },
					}}
				>
					<UniversalLogo type='icon-text' />

					<Box
						sx={{
							display: { xxs: 'none', sm: 'flex' },
							width: '378px',
							height: '50px',
							border: '1px solid #C7C7C7',
							alignItems: 'center',
							justifyContent: 'space-between',
							pl: '20px',
							pr: '10px',
						}}
					>
						<InputBase
							placeholder='Пошук по сайту'
							value={searchQuery}
							onChange={handleSearchChange}
							sx={{
								width: '100%',
								color: '#373737',
								'& .MuiInputBase-input': {
									padding: '8px 0',
								},
							}}
						/>
						<IconButton type='submit' onClick={handleSearchSubmit} sx={{ color: '#C7C7C7' }}>
							<SearchIcon />
						</IconButton>
					</Box>

					<Box sx={{ display: { xxs: 'none', sm: 'flex' } }}>
						<SocialLinks />
					</Box>

					<BurgerMenu
						navItems={navItems}
						searchQuery={searchQuery}
						onSearchChange={handleSearchChange}
						onSearchSubmit={handleSearchSubmit}
					/>
				</Box>

				<Divider
					sx={{
						width: '98%',
						height: '1px',
						mx: 'auto',
						mt: { xxs: 0, sm: 3 },
						mb: { xxs: 0, sm: 1 },
						display: { xxs: 'none', sm: 'block' },
					}}
				/>

				<Box
					sx={{
						display: { xxs: 'none', sm: 'flex' },
						alignItems: 'center',
						justifyContent: 'space-between',
						flexWrap: 'wrap',
						width: '100%',
						maxWidth: 'xxxl',
						px: 2,
						boxSizing: 'border-box',
					}}
				>
					{navItems.map(item => (
						<NavItem
							key={item.id}
							item={item}
							hoveredItem={hoveredItem}
							hoveredSubItem={hoveredSubItem}
							onMouseEnter={handleMouseEnter}
							onMouseLeave={handleMouseLeave}
							onSubItemMouseEnter={handleSubItemMouseEnter}
							onSubItemMouseLeave={handleSubItemMouseLeave}
						/>
					))}
				</Box>
			</Toolbar>
		</AppBar>
	)
}

export default Header

----
E:\Work\blackmetal\src\layouts\Header\index.tsx
----
export { default } from './Header'

----
E:\Work\blackmetal\src\layouts\Header\interface.ts
----
export interface NavItem {
	id: string
	label: string
	href?: string
	items: NavItem[]
	icon?: React.ReactNode // Добавим возможность указывать иконку
}

export interface NavigationData {
	navItems: NavItem[]
}

----
E:\Work\blackmetal\src\layouts\index.tsx
----
export { default as MainLayout } from './MainLayout'
export { default as Header } from './Header'
export { default as Footer } from './Footer'

----
E:\Work\blackmetal\src\layouts\MainLayout\index.tsx
----
export { default } from './MainLayout'

----
E:\Work\blackmetal\src\layouts\MainLayout\MainLayout.tsx
----
import { ReactNode } from 'react'
import { Header } from '@/layouts'

import { Footer } from '@/layouts'

interface MainLayoutProps {
	children: ReactNode
}

const MainLayout = ({ children }: MainLayoutProps) => {
	return (
		<div>
			<Header />
			{children}
			<Footer />
		</div>
	)
}

export default MainLayout

----
E:\Work\blackmetal\src\main.tsx
----
import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App'
import './styles/index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
	<React.StrictMode>
		<BrowserRouter>
			<App />
		</BrowserRouter>
	</React.StrictMode>
)

----
E:\Work\blackmetal\src\pages\DashboardPage\DashboardPage.tsx
----
import { Typography } from '@mui/material'

const DashboardPage = () => {
	return (
		<Typography variant='h4'>
			Панель управления (только для авторизованных)
		</Typography>
	)
}

export default DashboardPage

----
E:\Work\blackmetal\src\pages\DashboardPage\index.tsx
----
export { default } from './DashboardPage'

----
E:\Work\blackmetal\src\pages\HomePage\components\HeroSection\HeroSection.tsx
----
import { FC, useState, useEffect } from 'react';
import { Box, Container, Typography, Button } from '@mui/material';
import { styled } from '@mui/material/styles';
import { HeroSectionProps } from './types';
import { useNavigate } from 'react-router-dom';
import universityImage from '../../../../assets/images/university.png';
import unImage from '../../../../assets/images/un.jpg';
import { Modal } from '../../../../components/Modal';
import { FeedbackForm } from '../../../../components/FeedbackForm/FeedbackForm';

const HeaderContainer = styled(Box)({
  width: '100%',
  position: 'relative',
  marginBottom: '2rem',
  overflow: 'hidden',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  maxHeight: '880px',
  height: '880px',
});

const HeaderImage = styled('img')({
  width: '100%',
  height: '100%',
  display: 'block',
  objectFit: 'cover',
  position: 'absolute',
  top: 0,
  left: 0,
  transition: 'opacity 1s ease-in-out',
});

const Overlay = styled(Box)({
  position: 'absolute',
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  backgroundColor: 'rgba(20, 41, 52, 0.8)',
  display: 'flex',
  alignItems: 'center',
  zIndex: 2,
});

const ContentWrapper = styled(Box)({
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'flex-start',
  gap: '2rem',
  paddingLeft: '2rem',
});

const Hashtag = styled(Typography)(({ theme }) => ({
  color: '#fff',
  textAlign: 'left',
  fontSize: '6rem',
  fontWeight: 700,
  textShadow: '2px 2px 4px rgba(0,0,0,0.5)',
  [theme.breakpoints.down('md')]: {
    fontSize: '4rem',
  },
  [theme.breakpoints.down('sm')]: {
    fontSize: '3rem',
  },
}));

const StyledButton = styled(Button)(({ theme }) => ({
  color: '#fff',
  borderColor: '#fff',
  padding: '12px 32px',
  fontSize: '1.2rem',
  borderRadius: 0,
  '&:hover': {
    borderColor: '#fff',
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
  },
}));

export const HeroSection: FC<HeroSectionProps> = ({
  image,
  overlay = true
}) => {
  const navigate = useNavigate();
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const images = [universityImage, unImage];

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentImageIndex((prevIndex) => prevIndex === 0 ? 1 : 0);
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  const handleButtonClick = () => {
    setIsModalOpen(true);
  };

  return (
    <>
      <HeaderContainer>
        {images.map((img, index) => (
          <HeaderImage 
            key={index}
            src={img} 
            alt={`#IЧM ${index + 1}`}
            sx={{
              opacity: index === currentImageIndex ? 1 : 0,
              zIndex: index === currentImageIndex ? 1 : 0,
            }}
          />
        ))}
        {overlay && (
          <Overlay>
            <Container maxWidth="lg" sx={{ display: 'flex', alignItems: 'center' }}>
              <ContentWrapper>
                <Hashtag variant="h1">
                  #IЧM
                </Hashtag>
                <StyledButton 
                  variant="outlined" 
                  size="large"
                  onClick={handleButtonClick}
                >
                  Зворотний зв'язок
                </StyledButton>
              </ContentWrapper>
            </Container>
          </Overlay>
        )}
      </HeaderContainer>

      <Modal
        open={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title="Зворотний зв'язок"
      >
        <FeedbackForm onClose={() => setIsModalOpen(false)} />
      </Modal>
    </>
  );
}; 
----
E:\Work\blackmetal\src\pages\HomePage\components\HeroSection\index.ts
----
export { HeroSection } from './HeroSection'; 
----
E:\Work\blackmetal\src\pages\HomePage\components\HeroSection\types.ts
----
export interface HeroSectionProps {
  image: string;
  overlay?: boolean;
} 
----
E:\Work\blackmetal\src\pages\HomePage\components\News\index.ts
----
export { NewsCard } from './NewsCard';
export { NewsGrid } from './NewsGrid';
export type { NewsItem } from './NewsTypes'; 
----
E:\Work\blackmetal\src\pages\HomePage\components\News\news.json
----
{
  "news": [
    {
      "id": 1,
      "title": "Нова техніка в нашому університеті",
      "text": "Ми раді повідомити про надходження нової комп'ютерної техніки, яка допоможе покращити якість навчання та дослідницької роботи.",
      "imageUrl": "/kit.jpg",
      "date": "18.08.2023"
    },
    {
      "id": 2,
      "title": "Нова техніка в нашому університеті",
      "text": "Ми раді повідомити про надходження нової комп'ютерної техніки, яка допоможе покращити якість навчання та дослідницької роботи.",
      "imageUrl": "/isi.jpg",
      "date": "18.08.2023"
    },
    {
      "id": 3,
      "title": "Оновлення програмного забезпечення",
      "text": "Всі комп’ютери університету отримали оновлення спеціалізованого програмного забезпечення для покращення навчального процесу.",
      "imageUrl": "/isi.jpg",
      "date": "22.08.2023"
    },
    {
      "id": 4,
      "title": "Оновлення програмного забезпечення",
      "text": "Всі комп’ютери університету отримали оновлення спеціалізованого програмного забезпечення для покращення навчального процесу.",
      "imageUrl": "/isi.jpg",
      "date": "22.08.2023"
    },
    {
      "id": 5,
      "title": "Оновлення програмного забезпечення",
      "text": "Всі комп’ютери університету отримали оновлення спеціалізованого програмного забезпечення для покращення навчального процесу.",
      "imageUrl": "/isi.jpg",
      "date": "22.08.2023"
    },
    {
      "id": 6,
      "title": "Оновлення програмного забезпечення",
      "text": "Всі комп’ютери університету отримали оновлення спеціалізованого програмного забезпечення для покращення навчального процесу.",
      "imageUrl": "/isi.jpg",
      "date": "22.08.2023"
    },
    {
      "id": 7,
      "title": "Оновлення програмного забезпечення",
      "text": "Всі комп’ютери університету отримали оновлення спеціалізованого програмного забезпечення для покращення навчального процесу.",
      "imageUrl": "/isi.jpg",
      "date": "22.08.2023"
    },
    {
      "id": 8,
      "title": "Оновлення програмного забезпечення",
      "text": "Всі комп’ютери університету отримали оновлення спеціалізованого програмного забезпечення для покращення навчального процесу.",
      "imageUrl": "/isi.jpg",
      "date": "22.08.2023"
    },
    {
      "id": 9,
      "title": "Оновлення програмного забезпечення",
      "text": "Всі комп’ютери університету отримали оновлення спеціалізованого програмного забезпечення для покращення навчального процесу.",
      "imageUrl": "/isi.jpg",
      "date": "22.08.2023"
    },
    {
      "id": 10,
      "title": "Оновлення програмного забезпечення",
      "text": "Всі комп’ютери університету отримали оновлення спеціалізованого програмного забезпечення для покращення навчального процесу.",
      "imageUrl": "/isi.jpg",
      "date": "22.08.2023"
    },
    {
      "id": 11,
      "title": "Запуск нової онлайн-платформи",
      "text": "Запущено нову онлайн-платформу для дистанційного навчання з інтеграцією відеоконференцій.",
      "imageUrl": "/isi.jpg",
      "date": "24.08.2023"
    },
    {
      "id": 12,
      "title": "Міжнародна конференція з ІТ",
      "text": "Університет проведе міжнародну конференцію з ІТ, куди запрошено провідних фахівців галузі.",
      "imageUrl": "/isi.jpg",
      "date": "26.08.2023"
    },
    {
      "id": 13,
      "title": "Набір на курси програмування",
      "text": "Оголошується набір студентів на безкоштовні курси програмування мовою Python.",
      "imageUrl": "/isi.jpg",
      "date": "28.08.2023"
    },
    {
      "id": 14,
      "title": "Вебінар із кібербезпеки",
      "text": "Запрошуємо на безкоштовний вебінар з основ кібербезпеки та захисту даних.",
      "imageUrl": "/isi.jpg",
      "date": "30.08.2023"
    },
    {
      "id": 15,
      "title": "Модернізація лабораторій",
      "text": "У рамках проєкту «Інноваційна освіта» відбувається модернізація фізико-хімічних лабораторій.",
      "imageUrl": "/isi.jpg",
      "date": "01.09.2023"
    },
    {
      "id": 16,
      "title": "Відкриття студентської бібліотеки",
      "text": "Сьогодні урочисто відкрито нову студентську бібліотеку з оновленим фондом літератури.",
      "imageUrl": "/isi.jpg",
      "date": "03.09.2023"
    },
    {
      "id": 17,
      "title": "Засідання наукового гуртка",
      "text": "Проводиться засідання наукового гуртка з робототехніки, запрошуються всі охочі.",
      "imageUrl": "/isi.jpg",
      "date": "05.09.2023"
    },
    {
      "id": 18,
      "title": "Конкурс стартапів серед студентів",
      "text": "Оголошується конкурс стартапів: автори найкращих проєктів отримають фінансову підтримку.",
      "imageUrl": "/isi.jpg",
      "date": "07.09.2023"
    },
    {
      "id": 19,
      "title": "Спортивні змагання університету",
      "text": "Університет проводить щорічні спортивні змагання з волейболу та футболу.",
      "imageUrl": "/isi.jpg",
      "date": "09.09.2023"
    },
    {
      "id": 20,
      "title": "Новий партнер для стажувань",
      "text": "Підписано меморандум про співпрацю зі світовою компанією для проходження студентських стажувань.",
      "imageUrl": "/isi.jpg",
      "date": "11.09.2023"
    },
    {
      "id": 21,
      "title": "Лекція від викладача з Польщі",
      "text": "Гостем університету стане професор із Вроцлавського університету, який прочитає відкриту лекцію.",
      "imageUrl": "/isi.jpg",
      "date": "13.09.2023"
    },
    {
      "id": 22,
      "title": "Тренінг із тайм-менеджменту",
      "text": "Для студентів організовано безкоштовний тренінг із тайм-менеджменту та особистої ефективності.",
      "imageUrl": "/isi.jpg",
      "date": "15.09.2023"
    },
    {
      "id": 23,
      "title": "Екологічна акція на кампусі",
      "text": "Запрошуємо долучитися до прибирання території університету в рамках екологічної акції.",
      "imageUrl": "/isi.jpg",
      "date": "17.09.2023"
    },
    {
      "id": 24,
      "title": "Відкриття фотовиставки",
      "text": "У холі головного корпусу розгорнуто виставку студентських фотографій на тему «Наш університет».",
      "imageUrl": "/isi.jpg",
      "date": "19.09.2023"
    },
    {
      "id": 25,
      "title": "Онлайн-курси з Data Science",
      "text": "Студенти зможуть безкоштовно пройти онлайн-курси з Data Science від провідних університетів світу.",
      "imageUrl": "/isi.jpg",
      "date": "21.09.2023"
    },
    {
      "id": 26,
      "title": "Обмін студентами з Німеччиною",
      "text": "Розпочато програму обміну студентами з технічним університетом Берліна на семестр.",
      "imageUrl": "/isi.jpg",
      "date": "23.09.2023"
    },
    {
      "id": 27,
      "title": "Відкритий мікрофон для студентів",
      "text": "Запрошуємо всіх талановитих студентів виступити зі своїми музичними та поетичними творами.",
      "imageUrl": "/isi.jpg",
      "date": "25.09.2023"
    },
    {
      "id": 28,
      "title": "Нове обладнання в бібліотеці",
      "text": "У бібліотеці встановлено сучасні робочі місця з електронними рідерами та швидкісним інтернетом.",
      "imageUrl": "/isi.jpg",
      "date": "27.09.2023"
    },
    {
      "id": 29,
      "title": "Кар’єрний ярмарок для студентів",
      "text": "Університет організовує ярмарок вакансій, де студенти зможуть поспілкуватися з роботодавцями.",
      "imageUrl": "/isi.jpg",
      "date": "29.09.2023"
    },
    {
      "id": 30,
      "title": "Відкрите заняття з мистецтва",
      "text": "Професор кафедри мистецтва проведе відкритий майстер-клас з живопису.",
      "imageUrl": "/isi.jpg",
      "date": "01.10.2023"
    },
    {
      "id": 31,
      "title": "Актуальні тренди у веб-розробці",
      "text": "Лекція провідних розробників про сучасні технології та інструменти веб-розробки.",
      "imageUrl": "/isi.jpg",
      "date": "03.10.2023"
    },
    {
      "id": 32,
      "title": "Студентські дебати з екології",
      "text": "Команди студентів з різних факультетів візьмуть участь у дебатах щодо змін клімату.",
      "imageUrl": "/isi.jpg",
      "date": "05.10.2023"
    },
    {
      "id": 33,
      "title": "Оновлення спортивного майданчика",
      "text": "На території університету відкрито новий легкоатлетичний майданчик із біговими доріжками.",
      "imageUrl": "/isi.jpg",
      "date": "07.10.2023"
    },
    {
      "id": 34,
      "title": "Майстер-клас із робототехніки",
      "text": "Запрошуємо студентів на майстер-клас з конструювання та програмування роботів.",
      "imageUrl": "/isi.jpg",
      "date": "09.10.2023"
    },
    {
      "id": 35,
      "title": "Церемонія вручення стипендій",
      "text": "Кращі студенти отримають стипендії за успіхи в навчанні та науці.",
      "imageUrl": "/isi.jpg",
      "date": "11.10.2023"
    },
    {
      "id": 36,
      "title": "Відкриття студентської кав’ярні",
      "text": "У холі на першому поверсі відкрито нову кав’ярню з лояльними цінами для студентів.",
      "imageUrl": "/isi.jpg",
      "date": "13.10.2023"
    },
    {
      "id": 37,
      "title": "Онлайн-зустріч з випускниками",
      "text": "Запрошуємо на онлайн-зустріч з успішними випускниками, які поділяться досвідом кар’єрного зростання.",
      "imageUrl": "/isi.jpg",
      "date": "15.10.2023"
    },
    {
      "id": 38,
      "title": "Курс із штучного інтелекту",
      "text": "Стартує новий курс із основ штучного інтелекту та машинного навчання.",
      "imageUrl": "/isi.jpg",
      "date": "17.10.2023"
    },
    {
      "id": 39,
      "title": "Ремонт гуртожитків до зимового сезону",
      "text": "У гуртожитках проводяться роботи з утеплення та оновлення систем опалення.",
      "imageUrl": "/isi.jpg",
      "date": "19.10.2023"
    },
    {
      "id": 40,
      "title": "Міжкафедральний хакатон",
      "text": "Студенти різних спеціальностей змагатимуться у розробці інноваційних проєктів протягом 48 годин.",
      "imageUrl": "/isi.jpg",
      "date": "21.10.2023"
    },
    {
      "id": 41,
      "title": "Культурний вечір у театрі",
      "text": "Організовано поїздку до обласного драмтеатру на театральну постановку студентами театрального факультету.",
      "imageUrl": "/isi.jpg",
      "date": "23.10.2023"
    },
    {
      "id": 42,
      "title": "Нові стипендіальні програми",
      "text": "Оголошено набір на міжнародні стипендіальні програми для навчання за кордоном.",
      "imageUrl": "/isi.jpg",
      "date": "25.10.2023"
    },
    {
      "id": 43,
      "title": "Відкрите заняття з хімії",
      "text": "Професор кафедри хімії проведе демонстрацію хімічних експериментів для студентів усіх курсів.",
      "imageUrl": "/isi.jpg",
      "date": "27.10.2023"
    },
    {
      "id": 44,
      "title": "Студентська конференція з біології",
      "text": "Проводиться конференція для студентів-біологів із доповідями на тему екосистем та збереження природи.",
      "imageUrl": "/isi.jpg",
      "date": "29.10.2023"
    },
    {
      "id": 45,
      "title": "Оновлення серверної інфраструктури",
      "text": "IT-відділ університету провів оновлення серверів, щоб покращити швидкість внутрішніх ресурсів.",
      "imageUrl": "/isi.jpg",
      "date": "31.10.2023"
    },
    {
      "id": 46,
      "title": "Тренінг із лідерства",
      "text": "Студентська рада організувала тренінг з розвитку лідерських навичок для активних студентів.",
      "imageUrl": "/isi.jpg",
      "date": "02.11.2023"
    },
    {
      "id": 47,
      "title": "Відкриття нового спортзалу",
      "text": "На території кампусу відкрито сучасний спортзал із новим обладнанням для тренувань.",
      "imageUrl": "/isi.jpg",
      "date": "04.11.2023"
    },
    {
      "id": 48,
      "title": "Кар’єрний порадник: як знайти роботу",
      "text": "Лекція від фахівця з кар’єрного розвитку про стратегії пошуку роботи після випуску.",
      "imageUrl": "/isi.jpg",
      "date": "06.11.2023"
    },
    {
      "id": 49,
      "title": "Фестиваль студентської творчості",
      "text": "Проводиться фестиваль, де можна побачити виступи музикантів, театральні постановки та художні виставки.",
      "imageUrl": "/isi.jpg",
      "date": "08.11.2023"
    },
    {
      "id": 50,
      "title": "Майстер-клас із графічного дизайну",
      "text": "Графічні дизайнери з провідної студії проведуть майстер-клас з Adobe Illustrator та Photoshop.",
      "imageUrl": "/isi.jpg",
      "date": "10.11.2023"
    },
    {
      "id": 51,
      "title": "Оновлення бібліотечного фонду",
      "text": "До бібліотеки додано нові підручники та монографії з технічних та гуманітарних напрямів.",
      "imageUrl": "/isi.jpg",
      "date": "12.11.2023"
    },
    {
      "id": 52,
      "title": "Цикл лекцій із підприємництва",
      "text": "Серія лекцій від успішних підприємців про заснування стартапів та управління проєктами.",
      "imageUrl": "/isi.jpg",
      "date": "14.11.2023"
    },
    {
      "id": 53,
      "title": "Відкритий урок з англійської мови",
      "text": "Носії мови проведуть відкритий інтерактивний урок для студентів усіх спеціальностей.",
      "imageUrl": "/isi.jpg",
      "date": "16.11.2023"
    },
    {
      "id": 54,
      "title": "Екскурсія на підприємство",
      "text": "Студенти інженерних спеціальностей відвідають локальний завод для практичного знайомства з виробництвом.",
      "imageUrl": "/isi.jpg",
      "date": "18.11.2023"
    },
    {
      "id": 55,
      "title": "Нове програмне забезпечення для бібліотеки",
      "text": "Встановлено систему електронного каталогу, що спрощує пошук книг та замовлення онлайн.",
      "imageUrl": "/isi.jpg",
      "date": "20.11.2023"
    },
    {
      "id": 56,
      "title": "Конкурс наукових робіт",
      "text": "Оголошено конкурс на кращі студентські наукові роботи з нагородами та публікацією у журналі.",
      "imageUrl": "/isi.jpg",
      "date": "22.11.2023"
    },
    {
      "id": 57,
      "title": "Тематичний вечір з кіно",
      "text": "Студентський кіноклуб покаже добірку українських фільмів із обговоренням після перегляду.",
      "imageUrl": "/isi.jpg",
      "date": "24.11.2023"
    },
    {
      "id": 58,
      "title": "Волонтерський проєкт у дитячому будинку",
      "text": "Студенти та викладачі долучилися до благодійної акції та відвідали місцевий дитячий будинок.",
      "imageUrl": "/isi.jpg",
      "date": "26.11.2023"
    },
    {
      "id": 59,
      "title": "Семінар із психологічного здоров’я",
      "text": "Психологи університету проведуть семінар про боротьбу зі стресом та розвантаження під час сесії.",
      "imageUrl": "/isi.jpg",
      "date": "28.11.2023"
    },
    {
      "id": 60,
      "title": "Засідання клубу любителів шахів",
      "text": "Щочетверга о 17:00 відбуваються зустрічі шахового клубу для початківців та досвідчених гравців.",
      "imageUrl": "/isi.jpg",
      "date": "30.11.2023"
    }
  ]
}

----
E:\Work\blackmetal\src\pages\HomePage\components\News\NewsCard.tsx
----
import { FC } from 'react';
import { Card, CardContent, CardMedia, Typography, Button, Box } from '@mui/material';
import { styled } from '@mui/material/styles';
import { NewsItem } from './NewsTypes';

type NewsCardProps = NewsItem;

const StyledCard = styled(Card)(({ theme }) => ({
  display: 'flex',
  height: '190px',
  width: '100%',
  boxShadow: '0 4px 20px rgba(20, 41, 52, 0.08)',
  borderRadius: 0,
  [theme.breakpoints.down('sm')]: {
    height: 'auto',
    minHeight: '160px',
    flexDirection: 'column',
  },
}));

const StyledCardMedia = styled(CardMedia)({
  width: '170px',
  height: '100%',
  flexShrink: 0,
  backgroundColor: 'rgba(0,0,0,0.04)',
  borderRadius: 0,
  '@media (max-width: 600px)': {
    width: '100%',
    height: '300px',
    margin: 0,
    borderRadius: 0,
  },
});

const ContentBox = styled(Box)({
  display: 'flex',
  flexDirection: 'column',
  flex: 1,
  height: '100%',
});

const TextContent = styled(Box)({
  flex: 1,
  display: 'flex',
  flexDirection: 'column',
  gap: '8px',
  overflow: 'hidden',
});

const ActionBox = styled(Box)({
  display: 'flex',
  justifyContent: 'space-between',
  alignItems: 'center',
  marginTop: 'auto',
  paddingTop: '6px',
  '@media (max-width: 600px)': {
    paddingTop: '6px',
  },
});

const StyledButton = styled(Button)(({ theme }) => ({
  padding: '7px 20px',
  fontSize: '0.875rem',
  fontWeight: 500,
  textTransform: 'none',
  borderColor: theme.palette.primary.main,
  color: theme.palette.primary.main,
  borderRadius: 0,
  '&:hover': {
    borderColor: theme.palette.primary.dark,
    backgroundColor: 'rgba(20, 41, 52, 0.04)',
  },
}));

export const NewsCard: FC<NewsCardProps> = ({
  title,
  text,
  imageUrl,
  date,
  onClick,
}) => {
  return (
    <StyledCard>
      <StyledCardMedia
        image={imageUrl}
        title={title}
      />
      <CardContent sx={{ 
        flex: 1, 
        display: 'flex', 
        flexDirection: 'column',
        p: { xs: 2, sm: 2.5, md: 2 },
        '&:last-child': { pb: { xs: 2, sm: 2.5, md: 2 } }
      }}>
        <ContentBox>
          <TextContent>
            <Typography 
              variant="h6" 
              component="h2" 
              sx={{ 
                overflow: 'hidden',
                textOverflow: 'ellipsis',
                display: '-webkit-box',
                WebkitLineClamp: 2,
                WebkitBoxOrient: 'vertical',
                fontWeight: 800,
                fontSize: { xs: '1.1rem', sm: '1.35rem' },
                lineHeight: 1.3,
                color: '#142934',
                mb: 0.5
              }}
            >
              {title}
            </Typography>
            <Typography 
              variant="body2"
              color="text.secondary"
              sx={{
                fontSize: { xs: '0.92rem', sm: '1rem' },
                lineHeight: 1.5,
                opacity: 0.85,
                overflow: 'hidden',
                textOverflow: 'ellipsis',
                display: '-webkit-box',
                WebkitLineClamp: 2,
                WebkitBoxOrient: 'vertical',
                mb: 0.5
              }}
            >
              {text}
            </Typography>
          </TextContent>
          <ActionBox>
            <StyledButton 
              variant="outlined"
              onClick={onClick}
              sx={{
                minWidth: '110px',
                fontSize: '0.92rem',
                py: 0.5,
                px: 2,
                mb: 1.2,
                '&:hover': {
                  backgroundColor: theme => theme.palette.primary.main,
                  color: '#fff'
                }
              }}
            >
              Перейти
            </StyledButton>
            <Typography 
              variant="caption" 
              sx={{ 
                color: 'text.secondary',
                fontSize: '0.95rem',
                opacity: 0.75,
                ml: 2
              }}
            >
              {date}
            </Typography>
          </ActionBox>
        </ContentBox>
      </CardContent>
    </StyledCard>
  );
}; 
----
E:\Work\blackmetal\src\pages\HomePage\components\News\NewsGrid.tsx
----
import { FC, useState, useEffect } from 'react';
import { Grid, CircularProgress, Alert, Box, useTheme, useMediaQuery } from '@mui/material';
import { NewsCard } from './NewsCard';
import { NewsItem } from './NewsTypes';
import { Pagination } from '../../../../components/Pagination/Pagination';
import newsData from './news.json';

export const NewsGrid: FC = () => {
  const [news, setNews] = useState<NewsItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const isTablet = useMediaQuery(theme.breakpoints.down('md'));
  
  const ITEMS_PER_PAGE = isMobile ? 4 : isTablet ? 4 : 6;

  useEffect(() => {
    const loadNews = () => {
      try {
        setTimeout(() => {
          const loadedNews = newsData.news.map(item => ({
            ...item,
            onClick: () => console.log(`Переход к новости ${item.id}`)
          }));
          setNews(loadedNews);
          setLoading(false);
        }, 1000);
      } catch (err) {
        setError('Ошибка при загрузке новостей');
        setLoading(false);
      }
    };

    loadNews();
  }, []);

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
  const displayedNews = news.slice(startIndex, startIndex + ITEMS_PER_PAGE);

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', py: 4, width: '100%' }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Alert severity="error" sx={{ mb: 2 }}>
        {error}
      </Alert>
    );
  }

  return (
    <Box sx={{ width: '100%' }}>
      <Grid 
        container 
        spacing={{ xs: 3, sm: 4, md: 5 }}
        sx={{ mb: { xs: 3, sm: 4, md: 5 } }}
      >
        {displayedNews.map((item, idx) => (
          <Grid 
            item 
            key={item.id} 
            xs={12} 
            sm={6}
            sx={{
              mb: {
                xxs: idx !== displayedNews.length - 1 ? 2 : 0,
                xs: 0
              }
            }}
          >
            <NewsCard {...item} />
          </Grid>
        ))}
      </Grid>
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'center',
        mt: { xs: 2, sm: 3, md: 4 }
      }}>
        <Pagination
          totalItems={news.length}
          itemsPerPage={ITEMS_PER_PAGE}
          currentPage={currentPage}
          onPageChange={handlePageChange}
          siblingCount={isMobile ? 0 : 1}
        />
      </Box>
    </Box>
  );
}; 
----
E:\Work\blackmetal\src\pages\HomePage\components\News\NewsTypes.ts
----
export interface NewsItem {
  id: number;
  title: string;
  text: string;
  imageUrl: string;
  date: string;
  onClick?: () => void;
} 
----
E:\Work\blackmetal\src\pages\HomePage\HomePage.tsx
----
import { Container, Box } from '@mui/material';
import { NewsGrid } from './components/News';
import { HeroSection } from './components/HeroSection';
import universityImage from '../../assets/images/university.png';

const HomePage = () => {
	return (
		<>
			<HeroSection image={universityImage} />
			<Container maxWidth="xl" sx={{ py: 4 }}>
				<NewsGrid />
			</Container>
		</>
	);
};

export default HomePage;
----
E:\Work\blackmetal\src\pages\HomePage\index.tsx
----
export { default } from './HomePage'

----
E:\Work\blackmetal\src\pages\index.ts
----
export { default as DashboardPage } from './DashboardPage'
export { default as HomePage } from './HomePage'
export { default as NotFoundPage } from './NotFoundPage'

----
E:\Work\blackmetal\src\pages\NotFoundPage\index.tsx
----
export { default } from './NotFoundPage'

----
E:\Work\blackmetal\src\pages\NotFoundPage\NotFoundPage.tsx
----
import { Typography } from '@mui/material'

const NotFoundPage = () => {
	return <Typography variant='h4'>Ошибка 404 - Страница не найдена</Typography>
}

export default NotFoundPage

----
E:\Work\blackmetal\src\router\Router.tsx
----
import { lazy, Suspense } from 'react'
import { Routes, Route } from 'react-router-dom'
import Loader from '@/components/Loader'
import MainLayout from '@/layouts/MainLayout'
import routes from '@/router/routes.json'
import { RouteConfig } from '@/router/types'

const Router = () => {
	return (
		<Suspense fallback={<Loader />}>
			<Routes>
				{Object.entries(routes as Record<string, RouteConfig>).map(
					([key, route]) => {
						const Component = lazy(
							() => import(/* @vite-ignore */ `../pages/${route.component}`)
						)

						const Layout = route.layout
							? MainLayout
							: ({ children }: { children: React.ReactNode }) => <>{children}</>

						return (
							<Route
								key={key}
								path={route.path}
								element={
									<Layout>
										<Component />
									</Layout>
								}
							/>
						)
					}
				)}
			</Routes>
		</Suspense>
	)
}

export default Router

----
E:\Work\blackmetal\src\router\routes.json
----
{
	"HomePage": {
		"path": "/",
		"component": "HomePage",
		"title": "Інститут чорної металургії",
		"layout": "MainLayout"
	},
	"DashboardPage": {
		"path": "/dashboard",
		"component": "DashboardPage",
		"title": "Панель",
		"layout": "MainLayout"
	},
	"ServicesPage": {
		"path": "/services",
		"component": "ServicesPage",
		"title": "Сервіси",
		"layout": "MainLayout",
		"showIn": "Footer"
	},
	"RepositoryPage": {
		"path": "/repository",
		"component": "RepositoryPage",
		"title": "Репозиторій",
		"layout": "MainLayout",
		"showIn": "Footer"
	},
	"RemoteEducationPage": {
		"path": "/remote-education",
		"component": "RemoteEducationPage",
		"title": "Дистанційна освіта",
		"layout": "MainLayout",
		"showIn": "Footer"
	},
	"ApplicantPage": {
		"path": "/applicant",
		"component": "ApplicantPage",
		"title": "Абітурієнту",
		"layout": "MainLayout",
		"showIn": "Footer"
	},
	"EntrantPage": {
		"path": "/entrant",
		"component": "EntrantPage",
		"title": "Вступнику",
		"layout": "MainLayout",
		"showIn": "Footer"
	},
	"LibraryPage": {
		"path": "/library",
		"component": "LibraryPage",
		"title": "Бібліотека",
		"layout": "MainLayout",
		"showIn": "Footer"
	},
	"NotFoundPage": {
		"path": "*",
		"component": "NotFoundPage",
		"title": "Страница не найдена"
	}
}

----
E:\Work\blackmetal\src\router\types.ts
----
export interface RouteConfig {
	path: string
	component: string
	title: string
	layout?: string
	showIn?: string
}

export interface RoutesConfig {
	[key: string]: RouteConfig
}

----
E:\Work\blackmetal\src\styles\index.css
----
* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
}

----
E:\Work\blackmetal\src\theme.ts
----
import { createTheme } from '@mui/material/styles'

const breakpoints = {
	values: {
		xxs: 0,
		xs: 481,
		sm: 769,
		md: 1025,
		lg: 1281,
		xl: 1441,
		xxl: 1921,
		хххl: 2561,
	},
}

const commonThemeConfig = {
	breakpoints,
	shape: {
		borderRadius: 0
	},
	components: {
		MuiButton: {
			styleOverrides: {
				root: {
					borderRadius: 0
				}
			}
		},
		MuiPaper: {
			styleOverrides: {
				root: {
					borderRadius: 0
				}
			}
		},
		MuiCard: {
			styleOverrides: {
				root: {
					borderRadius: 0
				}
			}
		},
		MuiDialog: {
			styleOverrides: {
				paper: {
					borderRadius: 0
				}
			}
		},
		MuiAlert: {
			styleOverrides: {
				root: {
					borderRadius: 0
				}
			}
		},
		MuiChip: {
			styleOverrides: {
				root: {
					borderRadius: 0
				}
			}
		},
		MuiTextField: {
			styleOverrides: {
				root: {
					'& .MuiOutlinedInput-root': {
						borderRadius: 0
					}
				}
			}
		},
		MuiMenu: {
			styleOverrides: {
				paper: {
					borderRadius: 0
				}
			}
		},
		MuiPopover: {
			styleOverrides: {
				paper: {
					borderRadius: 0
				}
			}
		}
	}
}

export const lightTheme = createTheme({
	palette: {
		mode: 'light',
		primary: { main: '#2D7A84' },
		background: { default: '#f4f4f4', paper: '#fff' },
	},
	breakpoints,
})

export const darkTheme = createTheme({
	palette: {
		mode: 'dark',
		primary: { main: '#90caf9' },
		background: { default: '#121212', paper: '#1e1e1e' },
	},
	...commonThemeConfig
})

----
E:\Work\blackmetal\src\types\env.d.ts
----
/// <reference types="vite/client" />

interface ImportMetaEnv {
	readonly VITE_API_URL: string
}

interface ImportMeta {
	readonly env: ImportMetaEnv
}

----
E:\Work\blackmetal\src\utils\validators.ts
----
export const validateEmail = (email: string): string | null => {
  if (!email.trim()) {
    return 'Email обов\'язковий';
  }
  
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return 'Введіть коректний email';
  }

  return null;
};

export const validateName = (name: string): string | null => {
  const trimmedName = name.trim();
  
  if (!trimmedName) {
    return 'Ім\'я обов\'язкове';
  }

  if (trimmedName.length < 2) {
    return 'Ім\'я має містити мінімум 2 букви';
  }

  const nameRegex = /^[a-zA-Zа-яА-ЯіІїЇєЄґҐ'\s-]+$/;
  if (!nameRegex.test(trimmedName)) {
    return 'Ім\'я може містити тільки букви';
  }

  return null;
};

export const validateMessage = (message: string): string | null => {
  if (!message.trim()) {
    return 'Повідомлення обов\'язкове';
  }

  if (message.trim().length < 10) {
    return 'Повідомлення має містити мінімум 10 символів';
  }

  return null;
}; 
----
E:\Work\blackmetal\src\vite-env.d.ts
----
/// <reference types="vite/client" />

interface ImportMeta {
	readonly glob: <T = unknown>(
		pattern: string
	) => Record<string, () => Promise<T>>
}

----
E:\Work\blackmetal\tsconfig.app.json
----
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

----
E:\Work\blackmetal\tsconfig.json
----
{
	"compilerOptions": {
		"target": "ESNext",
		"module": "ESNext",
		"types": ["vite/client"],
		"jsx": "react-jsx",
		"strict": true,
		"esModuleInterop": true,
		"skipLibCheck": true,
		"forceConsistentCasingInFileNames": true,
		"moduleResolution": "Node",
		"resolveJsonModule": true,
		"allowSyntheticDefaultImports": true,
		"baseUrl": "./",
		"paths": {
			"@/*": ["src/*"],
			"@assets/*": ["src/assets/*"],
			"@components/*": ["src/components/*"],
			"@config/*": ["src/config/*"],
			"@hooks/*": ["src/hooks/*"],
			"@layouts/*": ["src/layouts/*"],
			"@pages/*": ["src/pages/*"],
			"@router/*": ["src/router/*"],
			"@store/*": ["src/store/*"],
			"@styles/*": ["src/styles/*"],
			"@types/*": ["src/types/*"],
			"@utils/*": ["src/utils/*"]
		}
	}
}

----
E:\Work\blackmetal\tsconfig.node.json
----
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

----
E:\Work\blackmetal\tsconfig.tsbuildinfo
----
{"root":["./vite.config.ts","./src/app.tsx","./src/main.tsx","./src/theme.ts","./src/vite-env.d.ts","./src/components/index.ts","./src/components/feedbackform/feedbackform.tsx","./src/components/loader/loader.tsx","./src/components/loader/index.tsx","./src/components/modal/modal.tsx","./src/components/modal/index.ts","./src/components/modal/types.ts","./src/components/pagination/pagination.tsx","./src/components/pagination/index.ts","./src/components/pagination/types.ts","./src/components/pagination/usepagination.ts","./src/components/sociallinks/sociallinks.tsx","./src/components/sociallinks/index.tsx","./src/components/universallogo/logointerface.ts","./src/components/universallogo/universallogo.tsx","./src/components/universallogo/index.tsx","./src/hooks/usetheme.ts","./src/layouts/index.tsx","./src/layouts/footer/footer.tsx","./src/layouts/footer/index.tsx","./src/layouts/header/header.tsx","./src/layouts/header/index.tsx","./src/layouts/header/interface.ts","./src/layouts/header/components/index.tsx","./src/layouts/header/components/burgermenu/burgermenu.tsx","./src/layouts/header/components/burgermenu/index.tsx","./src/layouts/header/components/dropdownmenu/dropdownmenu.tsx","./src/layouts/header/components/dropdownmenu/nesteddropdownmenu.tsx","./src/layouts/header/components/dropdownmenu/index.tsx","./src/layouts/header/components/linedivider/linedivider.tsx","./src/layouts/header/components/linedivider/index.tsx","./src/layouts/header/components/navitem/navitem.tsx","./src/layouts/header/components/navitem/index.tsx","./src/layouts/header/components/search/search.tsx","./src/layouts/header/components/search/index.tsx","./src/layouts/mainlayout/mainlayout.tsx","./src/layouts/mainlayout/index.tsx","./src/pages/index.ts","./src/pages/dashboardpage/dashboardpage.tsx","./src/pages/dashboardpage/index.tsx","./src/pages/homepage/homepage.tsx","./src/pages/homepage/index.tsx","./src/pages/homepage/components/herosection/herosection.tsx","./src/pages/homepage/components/herosection/index.ts","./src/pages/homepage/components/herosection/types.ts","./src/pages/homepage/components/news/newscard.tsx","./src/pages/homepage/components/news/newsgrid.tsx","./src/pages/homepage/components/news/newstypes.ts","./src/pages/homepage/components/news/index.ts","./src/pages/notfoundpage/notfoundpage.tsx","./src/pages/notfoundpage/index.tsx","./src/router/router.tsx","./src/router/types.ts","./src/types/env.d.ts","./src/utils/validators.ts"],"version":"5.7.3"}
----
E:\Work\blackmetal\vite.config.ts
----
import react from '@vitejs/plugin-react-swc'
import { defineConfig } from 'vite'

export default defineConfig({
	resolve: {
		alias: {
			'@': '/src',
			'@assets': '/src/assets',
			'@components': '/src/components',
			'@config': '/src/config',
			'@hooks': '/src/hooks',
			'@layouts': '/src/layouts',
			'@pages': '/src/pages',
			'@router': '/src/router',
			'@store': '/src/store',
			'@styles': '/src/styles',
			'@types': '/src/types',
			'@utils': '/src/utils',
		},
	},
	plugins: [react()],
	base: '/blackmetal/',
})

